{"version":3,"sources":["webpack:///src/app/pages/payment-infor/payment-infor.page.html","webpack:///src/app/pages/payment-infor/payment-infor.page.ts","webpack:///src/app/pages/payment-infor/payment-infor.module.ts"],"names":["PaymentInforPage","modalController","loading","apiService","navCtrl","route","paymentUpdateAt","paymentID","snapshot","paramMap","get","listPaymentContent","listPaymentHistoryContent","getPaymentDetail","self","present","subscribe","result","totalCash","paymentBill","total","paidAmount","titlePage","payment","title","paymentStartAt","paymentCategoryTranfer","category","transfer","paymentCategoryCash","cash","paymentEndAt","content","paymentStatus","status","settingPaymentMode","campaign","appartment","apartment","updatedAt","today","Date","endAt","managementFeeEnable","Array","length","fill","dismiss","getPayTheBillHistory","resultHistory","paymentLogs","errorHistory","error","stringDate","formatString","stringValue","n","parseInt","toFixed","replace","c","i","a","textInput","event","back","animated","animationDirection","navigateForward","create","component","componentProps","id","cssClass","modal","paymentComplainModal","selector","templateUrl","styleUrls","routes","path","PaymentInforPageModule","forChild","imports","declarations"],"mappings":"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","file":"pages-payment-infor-payment-infor-module-es5.js","sourcesContent":["<ion-header class=\"ion-no-border payment-info-header\">\r\n  <ion-buttons class=\"back-button\">\r\n    <ion-back-button color=\"light\" text=\"\" icon=\"chevron-back\" class=\"ion-back-button\"></ion-back-button>\r\n  </ion-buttons>\r\n</ion-header>\r\n<ion-card class=\"payment-card\">\r\n  <ion-item lines=\"none\" class=\"payment-card-item\" *ngIf=\"settingPaymentMode == 'active'\">\r\n    <ion-label slot=\"start\" class=\"update-time\">{{formatString(paymentUpdateAt)}}</ion-label>\r\n    <ion-badge class=\"badge-status badge-paid\" *ngIf=\"paymentStatus == 'completed'\">{{ 'PAYMENT.badge_paid' | translate }}\r\n    </ion-badge>\r\n    <ion-badge class=\"badge-status badge-unpaid\" *ngIf=\"paymentStatus == 'publish'\">{{ 'PAYMENT.badge_unpaid' | translate }}\r\n    </ion-badge>\r\n    <ion-badge class=\"badge-status badge-pending\" *ngIf=\"paymentStatus == 'pending'\">{{ 'PAYMENT.status_pending' | translate }}\r\n    </ion-badge>\r\n    <ion-badge class=\"badge-status badge-outdate\" *ngIf=\"paymentStatus == 'outdate'\">{{ 'PAYMENT.badge_outdate' | translate }}\r\n    </ion-badge>\r\n  </ion-item>\r\n  <ion-text class=\"\">\r\n    <p class=\"payment-title\">{{titlePage}} - {{appartment}}</p>\r\n  </ion-text>\r\n  <div class=\"devider-line-info-payment\"></div>\r\n  <ion-item lines=\"none\" class=\"payment-money-item\">\r\n    <ion-label fixed slot=\"start\" class=\"money-title\">{{\"PAYMENT.number_money_label\" | translate}} </ion-label>\r\n    <ion-label class=\"mone-number\">{{formatMoney(totalCash)}}Ä‘</ion-label>\r\n  </ion-item>\r\n</ion-card>\r\n<ion-content class=\"payment-info-content\">\r\n  <ion-item lines=\"none\" class=\"section-content section-due-date\">\r\n    <ion-label class=\"section-title\">{{ 'PAYMENT_INFOR.payment_date' | translate }}</ion-label>\r\n    <ion-label class=\"due-date ion-float-right\">{{formatString(paymentEndAt)}}</ion-label>\r\n  </ion-item>\r\n\r\n  <section class=\"section-content margin-top-10\">\r\n    <ion-list *ngFor=\"let item of listPaymentContent; let i = index; last as isLast\" class=\"section-content-fee\">\r\n      <ion-item lines=\"none\" class=\"fee-item ion-no-padding\">\r\n        <ion-icon [src]=\"'../assets/icon/payment/bag.svg'\" class=\"icon-parking\"></ion-icon>\r\n        <ion-label class=\"fee-title\">{{item.type.title}}</ion-label>\r\n        <ion-label class=\"amount-number ion-float-right\">{{formatMoney(item.amount)}} </ion-label>\r\n        <!-- <ion-icon name=\"chevron-down-outline\" *ngIf=\"isGroupManagementFeeShown(i)\" class=\"icon-view-detail\"></ion-icon>\r\n        <ion-icon name=\"chevron-forward-outline\" *ngIf=\"!isGroupManagementFeeShown(i)\" class=\"icon-view-detail\"></ion-icon> -->\r\n      </ion-item>\r\n      <ion-item lines=\"none\" class=\"item-fee-detail ion-no-padding\">\r\n        <p [innerHTML]=\"convertText(item.description)\" class=\"fee-detail\"></p>\r\n      </ion-item>\r\n      <div class=\"devider-line-info-item\" *ngIf=\"!isLast\"></div>\r\n    </ion-list>\r\n  </section>\r\n\r\n  <ion-item *ngIf=\"listPaymentHistoryContent.length > 0\" lines=\"none\" class=\"section-content section-due-date margin-top-10\">\r\n    <ion-label class=\"section-title-bold\">{{ 'PAYMENT_INFOR.payment_history_title' | translate }}</ion-label>\r\n  </ion-item>\r\n\r\n  <section *ngIf=\"listPaymentHistoryContent.length > 0\" class=\"section-content margin-top-10\">\r\n    <ion-list *ngFor=\"let item of listPaymentHistoryContent; let i = index; last as isLast\" class=\"section-content-fee\">\r\n      <ion-item lines=\"none\" class=\"fee-item ion-no-padding\">\r\n        <ion-icon [src]=\"'../assets/icon/payment/money1.svg'\" class=\"icon-parking\"></ion-icon>\r\n        <ion-label class=\"fee-title\" *ngIf=\"item.type == 'cash'\">{{ 'PAYMENT_INFOR.payment_cash' | translate }}</ion-label>\r\n        <ion-label class=\"fee-title\" *ngIf=\"item.type != 'cash'\">{{ 'PAYMENT_INFOR.payment_online' | translate }}</ion-label>\r\n        <ion-label class=\"amount-number ion-float-right\">{{formatMoney(item.amount)}} </ion-label>\r\n        <!-- <ion-icon name=\"chevron-down-outline\" *ngIf=\"isGroupManagementFeeShown(i)\" class=\"icon-view-detail\"></ion-icon>\r\n        <ion-icon name=\"chevron-forward-outline\" *ngIf=\"!isGroupManagementFeeShown(i)\" class=\"icon-view-detail\"></ion-icon> -->\r\n      </ion-item>\r\n      <ion-item lines=\"none\" class=\"item-fee-detail ion-no-padding\">\r\n        <p [innerHTML]=\"convertText(item.note)\" class=\"fee-detail\"></p>\r\n      </ion-item>\r\n      <div class=\"devider-line-info-item\" *ngIf=\"!isLast\"></div>\r\n    </ion-list>\r\n  </section>\r\n\r\n  <ion-toolbar class=\"ion-toolbar-payment\">\r\n    <section class=\"margin-top-10 plan cf\" *ngIf=\"paymentStatus == 'publish' || paymentStatus == 'outdate'\">\r\n    </section>\r\n    <ion-button class=\"amo-button btn-default\" *ngIf=\"(paymentStatus == 'publish' || paymentStatus == 'outdate')\" (click)=\"goPaymentConfirm()\">{{ 'PAYMENT_INFOR.pay_now' |\r\n      translate }}</ion-button>\r\n    <ion-button class=\"default-button btn-default\" (click)=\"paymentComplainModal()\">{{ 'PAYMENT_INFOR.complain' | translate }}</ion-button>\r\n  </ion-toolbar>\r\n</ion-content>","import { Component, OnInit } from '@angular/core';\r\nimport { ApiService } from '../../services/api/api.service';\r\nimport { NavController } from '@ionic/angular';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { LoadingService } from '../../services/loading/loading.service';\r\nimport { UtilsService } from '../../utils/utils.service';\r\nimport { ModalController } from '@ionic/angular';\r\n\r\nimport { PopupComplainPage } from '../popup-complain/popup-complain.page';\r\n\r\n@Component({\r\n  selector: 'app-payment-infor',\r\n  templateUrl: './payment-infor.page.html',\r\n  styleUrls: ['./payment-infor.page.scss'],\r\n})\r\nexport class PaymentInforPage implements OnInit {\r\n  titlePage: string;\r\n  totalCash: number;\r\n  listPaymentContent: any;\r\n  listPaymentHistoryContent: any;\r\n  paymentStartAt: string;\r\n  paymentEndAt: string;\r\n  paymentCategoryTranfer: any;\r\n  paymentID: string;\r\n  managementFeeEnable: any;\r\n  paymentStatus: any;\r\n  settingPaymentMode: any;\r\n  // paymentType: any = \"payment_cash\";\r\n  paymentCategoryCash: any;\r\n  paymentUpdateAt = '';\r\n  appartment: any;\r\n  constructor(\r\n    public modalController: ModalController,\r\n    private loading: LoadingService,\r\n    private apiService: ApiService,\r\n    private navCtrl: NavController,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n  ngOnInit() {\r\n    this.paymentID = this.route.snapshot.paramMap.get('id');\r\n    this.listPaymentContent = [];\r\n    this.listPaymentHistoryContent = [];\r\n    // this.paymentType = 'payment_cash';\r\n    this.getPaymentDetail(this.paymentID);\r\n  }\r\n\r\n  getPaymentDetail(paymentID: string) {\r\n    const self = this;\r\n    this.loading.present();\r\n    this.apiService.getPaymentDetail(paymentID).subscribe(\r\n      (result) => {\r\n        self.totalCash = result.paymentBill.total;\r\n        self.totalCash = self.totalCash - result.paymentBill.paidAmount;\r\n        if(self.totalCash < 0){\r\n          self.totalCash = 0;\r\n        }\r\n        self.titlePage = result.paymentBill.payment.title;\r\n        self.paymentStartAt = result.paymentBill.payment.paymentStartAt;\r\n        self.paymentCategoryTranfer = result.paymentBill.category.transfer;\r\n        self.paymentCategoryCash = result.paymentBill.category.cash;\r\n        self.paymentEndAt = result.paymentBill.payment.paymentEndAt;\r\n        self.listPaymentContent = result.paymentBill.content;\r\n        self.paymentStatus = result.paymentBill.status;\r\n        self.settingPaymentMode = result.paymentBill.campaign.settingPaymentMode;\r\n        self.appartment = result.paymentBill.apartment.title + \" \" + result.paymentBill.campaign.title;\r\n        this.paymentUpdateAt = result.paymentBill.updatedAt;\r\n        let today = new Date();\r\n        let endAt = new Date(result.paymentBill.payment.paymentEndAt);\r\n        if (today > endAt && self.paymentStatus == 'publish') {\r\n          self.paymentStatus = 'outdate';\r\n        }\r\n        self.managementFeeEnable = new Array(self.listPaymentContent.length).fill(false);\r\n        self.loading.dismiss();\r\n        self.loading.present();\r\n        self.apiService.getPayTheBillHistory(paymentID).subscribe(\r\n          (resultHistory) => {\r\n            self.listPaymentHistoryContent = resultHistory.paymentLogs;\r\n          },\r\n          (errorHistory) => {\r\n            self.loading.dismiss();\r\n          })\r\n      },\r\n      (error) => {\r\n        self.loading.dismiss();\r\n      }\r\n    );\r\n  }\r\n\r\n  formatString(stringDate: string) {\r\n    return UtilsService.formatString(stringDate);\r\n  }\r\n\r\n  formatMoney(stringValue) {\r\n    let n = parseInt(stringValue);\r\n    return n.toFixed(0).replace(/./g, function (c, i, a) {\r\n      return i > 0 && c !== ',' && (a.length - i) % 3 === 0 ? '.' + c : c;\r\n    });\r\n  }\r\n\r\n  convertText(textInput: string) {\r\n    if (textInput && textInput.length > 0) {\r\n      return textInput.replace(/\\n/gi, '<br/>');\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  backScreen(event) {\r\n    this.navCtrl.back({\r\n      animated: true,\r\n      animationDirection: 'back',\r\n    });\r\n  }\r\n\r\n  showListComment() {\r\n    this.navCtrl.navigateForward('/payment-comment/' + this.paymentID);\r\n  }\r\n\r\n  async paymentComplainModal() {\r\n    var self = this;\r\n    const modal = await this.modalController.create({\r\n      component: PopupComplainPage,\r\n      componentProps: {\r\n        id: self.paymentID,\r\n      },\r\n      cssClass: 'popupPaymentComplain-page-custom',\r\n    });\r\n    return await modal.present();\r\n  }\r\n\r\n  goPaymentConfirm() {\r\n    this.navCtrl.navigateForward('/payment-confirm/' + this.paymentID);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { PaymentInforPage } from './payment-infor.page';\r\nimport { TranslateModule, TranslateLoader } from '@ngx-translate/core';\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PaymentInforPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    TranslateModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [PaymentInforPage]\r\n})\r\nexport class PaymentInforPageModule {}\r\n"]}